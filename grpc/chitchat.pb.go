// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.29.3
// source: grpc/chitchat.proto

package chitchat

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Types of client-originated events.
type ClientEventType int32

const (
	ClientEventType_CLIENT_EVENT_TYPE_UNSPECIFIED ClientEventType = 0
	ClientEventType_CLIENT_EVENT_TYPE_JOIN        ClientEventType = 1 // Client requests to join; must include client_id and optional display_name
	ClientEventType_CLIENT_EVENT_TYPE_CHAT        ClientEventType = 2 // Client publishes a chat message (<=128 UTF-8 chars)
	ClientEventType_CLIENT_EVENT_TYPE_LEAVE       ClientEventType = 3 // Client requests to leave
)

// Enum value maps for ClientEventType.
var (
	ClientEventType_name = map[int32]string{
		0: "CLIENT_EVENT_TYPE_UNSPECIFIED",
		1: "CLIENT_EVENT_TYPE_JOIN",
		2: "CLIENT_EVENT_TYPE_CHAT",
		3: "CLIENT_EVENT_TYPE_LEAVE",
	}
	ClientEventType_value = map[string]int32{
		"CLIENT_EVENT_TYPE_UNSPECIFIED": 0,
		"CLIENT_EVENT_TYPE_JOIN":        1,
		"CLIENT_EVENT_TYPE_CHAT":        2,
		"CLIENT_EVENT_TYPE_LEAVE":       3,
	}
)

func (x ClientEventType) Enum() *ClientEventType {
	p := new(ClientEventType)
	*p = x
	return p
}

func (x ClientEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClientEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_grpc_chitchat_proto_enumTypes[0].Descriptor()
}

func (ClientEventType) Type() protoreflect.EnumType {
	return &file_grpc_chitchat_proto_enumTypes[0]
}

func (x ClientEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClientEventType.Descriptor instead.
func (ClientEventType) EnumDescriptor() ([]byte, []int) {
	return file_grpc_chitchat_proto_rawDescGZIP(), []int{0}
}

// Types of server-originated events (broadcasts).
type ServerEventType int32

const (
	ServerEventType_SERVER_EVENT_TYPE_UNSPECIFIED ServerEventType = 0
	ServerEventType_SERVER_EVENT_TYPE_SYSTEM      ServerEventType = 1 // Server-generated join/leave/system notices
	ServerEventType_SERVER_EVENT_TYPE_CHAT        ServerEventType = 2 // Broadcast of a user chat message
)

// Enum value maps for ServerEventType.
var (
	ServerEventType_name = map[int32]string{
		0: "SERVER_EVENT_TYPE_UNSPECIFIED",
		1: "SERVER_EVENT_TYPE_SYSTEM",
		2: "SERVER_EVENT_TYPE_CHAT",
	}
	ServerEventType_value = map[string]int32{
		"SERVER_EVENT_TYPE_UNSPECIFIED": 0,
		"SERVER_EVENT_TYPE_SYSTEM":      1,
		"SERVER_EVENT_TYPE_CHAT":        2,
	}
)

func (x ServerEventType) Enum() *ServerEventType {
	p := new(ServerEventType)
	*p = x
	return p
}

func (x ServerEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServerEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_grpc_chitchat_proto_enumTypes[1].Descriptor()
}

func (ServerEventType) Type() protoreflect.EnumType {
	return &file_grpc_chitchat_proto_enumTypes[1]
}

func (x ServerEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServerEventType.Descriptor instead.
func (ServerEventType) EnumDescriptor() ([]byte, []int) {
	return file_grpc_chitchat_proto_rawDescGZIP(), []int{1}
}

// A Lamport logical timestamp.
type LogicalTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	T int64 `protobuf:"varint,1,opt,name=t,proto3" json:"t,omitempty"` // Lamport time
}

func (x *LogicalTime) Reset() {
	*x = LogicalTime{}
	mi := &file_grpc_chitchat_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LogicalTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogicalTime) ProtoMessage() {}

func (x *LogicalTime) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_chitchat_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogicalTime.ProtoReflect.Descriptor instead.
func (*LogicalTime) Descriptor() ([]byte, []int) {
	return file_grpc_chitchat_proto_rawDescGZIP(), []int{0}
}

func (x *LogicalTime) GetT() int64 {
	if x != nil {
		return x.T
	}
	return 0
}

// Event sent from client to server on the bidi stream.
type ClientEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        ClientEventType `protobuf:"varint,1,opt,name=type,proto3,enum=chitchat.ClientEventType" json:"type,omitempty"`
	ClientId    string          `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`          // Chosen by client or assigned by server (see first reply); must be stable per connection
	DisplayName string          `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"` // Optional friendly name for UI/use in system notices
	Content     string          `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`                            // For CHAT only; <=128 chars; UTF-8
	LogicalTime *LogicalTime    `protobuf:"bytes,5,opt,name=logical_time,json=logicalTime,proto3" json:"logical_time,omitempty"` // Client's Lamport time piggybacked with the event
}

func (x *ClientEvent) Reset() {
	*x = ClientEvent{}
	mi := &file_grpc_chitchat_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientEvent) ProtoMessage() {}

func (x *ClientEvent) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_chitchat_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientEvent.ProtoReflect.Descriptor instead.
func (*ClientEvent) Descriptor() ([]byte, []int) {
	return file_grpc_chitchat_proto_rawDescGZIP(), []int{1}
}

func (x *ClientEvent) GetType() ClientEventType {
	if x != nil {
		return x.Type
	}
	return ClientEventType_CLIENT_EVENT_TYPE_UNSPECIFIED
}

func (x *ClientEvent) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ClientEvent) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ClientEvent) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ClientEvent) GetLogicalTime() *LogicalTime {
	if x != nil {
		return x.LogicalTime
	}
	return nil
}

// Event broadcast by the server to all active clients.
type ServerEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        ServerEventType `protobuf:"varint,1,opt,name=type,proto3,enum=chitchat.ServerEventType" json:"type,omitempty"`
	ClientId    string          `protobuf:"bytes,2,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`          // Originator for CHAT; the subject client for SYSTEM join/leave messages
	DisplayName string          `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"` // Optional for convenience in UIs/logs
	Content     string          `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`                            // For CHAT or formatted system message
	LogicalTime *LogicalTime    `protobuf:"bytes,5,opt,name=logical_time,json=logicalTime,proto3" json:"logical_time,omitempty"` // Server-assigned Lamport time for this broadcast
}

func (x *ServerEvent) Reset() {
	*x = ServerEvent{}
	mi := &file_grpc_chitchat_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerEvent) ProtoMessage() {}

func (x *ServerEvent) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_chitchat_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerEvent.ProtoReflect.Descriptor instead.
func (*ServerEvent) Descriptor() ([]byte, []int) {
	return file_grpc_chitchat_proto_rawDescGZIP(), []int{2}
}

func (x *ServerEvent) GetType() ServerEventType {
	if x != nil {
		return x.Type
	}
	return ServerEventType_SERVER_EVENT_TYPE_UNSPECIFIED
}

func (x *ServerEvent) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ServerEvent) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ServerEvent) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ServerEvent) GetLogicalTime() *LogicalTime {
	if x != nil {
		return x.LogicalTime
	}
	return nil
}

// Initial metadata returned by server after the first JOIN from a client.
type Welcome struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssignedClientId string       `protobuf:"bytes,1,opt,name=assigned_client_id,json=assignedClientId,proto3" json:"assigned_client_id,omitempty"` // If server decides to override or assign IDs
	ServerTime       *LogicalTime `protobuf:"bytes,2,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"`                     // Server's current Lamport time so client can sync via max()
}

func (x *Welcome) Reset() {
	*x = Welcome{}
	mi := &file_grpc_chitchat_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Welcome) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Welcome) ProtoMessage() {}

func (x *Welcome) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_chitchat_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Welcome.ProtoReflect.Descriptor instead.
func (*Welcome) Descriptor() ([]byte, []int) {
	return file_grpc_chitchat_proto_rawDescGZIP(), []int{3}
}

func (x *Welcome) GetAssignedClientId() string {
	if x != nil {
		return x.AssignedClientId
	}
	return ""
}

func (x *Welcome) GetServerTime() *LogicalTime {
	if x != nil {
		return x.ServerTime
	}
	return nil
}

var File_grpc_chitchat_proto protoreflect.FileDescriptor

var file_grpc_chitchat_proto_rawDesc = []byte{
	0x0a, 0x13, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x63, 0x68, 0x69, 0x74, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x63, 0x68, 0x69, 0x74, 0x63, 0x68, 0x61, 0x74, 0x22,
	0x1b, 0x0a, 0x0b, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x0c,
	0x0a, 0x01, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x01, 0x74, 0x22, 0xd0, 0x01, 0x0a,
	0x0b, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x63, 0x68, 0x69,
	0x74, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x68,
	0x69, 0x74, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0xd0, 0x01, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x63, 0x68, 0x69, 0x74, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x63, 0x68, 0x69, 0x74, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x61,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x61, 0x6c, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x6f, 0x0a, 0x07, 0x57, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x2c, 0x0a,
	0x12, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x63, 0x68, 0x69, 0x74, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4c, 0x6f, 0x67, 0x69,
	0x63, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x54,
	0x69, 0x6d, 0x65, 0x2a, 0x89, 0x01, 0x0a, 0x0f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4c, 0x49, 0x45, 0x4e,
	0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4c,
	0x49, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4a, 0x4f, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54,
	0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x54,
	0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x10, 0x03, 0x2a,
	0x6e, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x45, 0x56, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45,
	0x4d, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x45, 0x56,
	0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x10, 0x02, 0x32,
	0x44, 0x0a, 0x08, 0x43, 0x68, 0x69, 0x74, 0x43, 0x68, 0x61, 0x74, 0x12, 0x38, 0x0a, 0x04, 0x43,
	0x68, 0x61, 0x74, 0x12, 0x15, 0x2e, 0x63, 0x68, 0x69, 0x74, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x15, 0x2e, 0x63, 0x68, 0x69,
	0x74, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x28, 0x01, 0x30, 0x01, 0x42, 0x2b, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x5a, 0x77, 0x65, 0x54, 0x79, 0x79, 0x2f, 0x63, 0x68, 0x69, 0x74, 0x2d,
	0x63, 0x68, 0x61, 0x74, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x3b, 0x63, 0x68, 0x69, 0x74, 0x63, 0x68,
	0x61, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_grpc_chitchat_proto_rawDescOnce sync.Once
	file_grpc_chitchat_proto_rawDescData = file_grpc_chitchat_proto_rawDesc
)

func file_grpc_chitchat_proto_rawDescGZIP() []byte {
	file_grpc_chitchat_proto_rawDescOnce.Do(func() {
		file_grpc_chitchat_proto_rawDescData = protoimpl.X.CompressGZIP(file_grpc_chitchat_proto_rawDescData)
	})
	return file_grpc_chitchat_proto_rawDescData
}

var file_grpc_chitchat_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_grpc_chitchat_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_grpc_chitchat_proto_goTypes = []any{
	(ClientEventType)(0), // 0: chitchat.ClientEventType
	(ServerEventType)(0), // 1: chitchat.ServerEventType
	(*LogicalTime)(nil),  // 2: chitchat.LogicalTime
	(*ClientEvent)(nil),  // 3: chitchat.ClientEvent
	(*ServerEvent)(nil),  // 4: chitchat.ServerEvent
	(*Welcome)(nil),      // 5: chitchat.Welcome
}
var file_grpc_chitchat_proto_depIdxs = []int32{
	0, // 0: chitchat.ClientEvent.type:type_name -> chitchat.ClientEventType
	2, // 1: chitchat.ClientEvent.logical_time:type_name -> chitchat.LogicalTime
	1, // 2: chitchat.ServerEvent.type:type_name -> chitchat.ServerEventType
	2, // 3: chitchat.ServerEvent.logical_time:type_name -> chitchat.LogicalTime
	2, // 4: chitchat.Welcome.server_time:type_name -> chitchat.LogicalTime
	3, // 5: chitchat.ChitChat.Chat:input_type -> chitchat.ClientEvent
	4, // 6: chitchat.ChitChat.Chat:output_type -> chitchat.ServerEvent
	6, // [6:7] is the sub-list for method output_type
	5, // [5:6] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_grpc_chitchat_proto_init() }
func file_grpc_chitchat_proto_init() {
	if File_grpc_chitchat_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_grpc_chitchat_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_grpc_chitchat_proto_goTypes,
		DependencyIndexes: file_grpc_chitchat_proto_depIdxs,
		EnumInfos:         file_grpc_chitchat_proto_enumTypes,
		MessageInfos:      file_grpc_chitchat_proto_msgTypes,
	}.Build()
	File_grpc_chitchat_proto = out.File
	file_grpc_chitchat_proto_rawDesc = nil
	file_grpc_chitchat_proto_goTypes = nil
	file_grpc_chitchat_proto_depIdxs = nil
}
